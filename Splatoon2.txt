***********************
DECODED SAVE CONTENTS
***********************
(see the next section for notes on 1.1.1+ save encryption and authentication)

The save has a CRC32, computed over is offset 0x10 len 0x483A0. bytes stored at 0x8, little-endian.

Cmn::GetSaveWrite returns a ptr to save section objects as described below
_ZN3Cmn15SaveDataFactory6spDataE_ptr is the same ptr, sometimes directly used instead
these objects + 0x10 is the raw save data buf for that section
0x10: Header        (save offset 0)
0x18: SaveDataCmn   (save offset 0x10)
0x20: SaveDataVss   (save offset 0x2B220)
0x28: SaveDataLocal (save offset 0x37970)
0x30: SaveDataMsn   (save offset 0x3AD58)
0x38: SaveDataShop  (save offset 0x40BD0)
0x40: SaveDataCoop  (save offset 0x438D0)
0x48: SaveDataFes   (save offset 0x48290)

(offsets can be updated if they change by checking Cmn::SaveData::SaveData)

Header:
0x0: Product version? (0 for splatfest test and 1.0, 1 on v1.1.1)
0x4: DevelopVersion (0 on all versions so far)
0x8: little-endian CRC32 of 0x483A0 bytes starting after header
0xC: Always zero

SaveDataCmn: Shared data
0x00: Gender; 0 for girl, 1 for boy (gender is fake, but this u32 isn't)
0x04: HairId
0x08: BottomId 
0x0C: SkinColorId (max 6)
0x10: EyeColorId (max 13)
0x14: weapons, 0x100 0x130-sized entries. (first 0x20 of each is actual data, what's last 0x110?)
0x13028: Gear info, 3 blocks of 0x6000 size for each GearKind
    GearKind: 0x200 0x30-len entries
0x25038: SkillChips, 0x20 0x10-sized entries
0x25238: BoostTickets, 0x40 0xC-len entries
...
0x255E0: online_play_penalty:penalty_point
0x255E4: online_play_penalty:penalty_count
...
0x256F8: array of 0x80 bools
...
0x25778: money
0x2577C: "TurbanShell"
...
0x258A4: time_location_for_seq (string)
...
0x271A8: 100 u8 bools, data used (along with some other flags) for unlocking squid beatz songs 35-42.

SaveDataVss: Versus
0x00: Rank
0x04: Experience
0x08: StarRank
0x0C: 'UseBoost' (0xC bytes)
0x18: 'Udemae' data (skill?) at least 4 indexes
    0: ?
    1: udemae:cVgl
    2: udemae:cVar
    3: udemae:cVlf
0x5E78: (u64) if 1, squid beatz songs 20-26 unlocked
    (the consumer of this data uses u64 index 2 starting from 0x5E68.. but it's hardcoded? this flag might be used for something else too)
    
SaveDataLocal: 
0x13E4: Stamp count?

SaveDataMsn: Octo Valley
0x0000: (u32) progress flags? 0x69 is post-final-boss
0x0004: (u32) worlds unlocked
0x1E46: (u8) squid beatz songs 11, 12, 15 unlocked
0x1E47: (u8) squid beatz songs 13 and 14 unlocked
0x1E4A: (u8) squid beatz song 9 unlocked
0x1E4E: (u8) squid beatz song 10 unlocked
(songs 16-19 are unlocked upon beating the final boss and unlocking world 3)

SaveDataCoop: Salmon Run
0x10: (u32) if >0, squid beatz songs 31-34 unlocked


SaveDataFest: Splatfest
0x00: current FestId (-1 for no splatfest)
0x04: splatfest team (0 or 1)
0x08: Current splatfest level (e.g. fiend, champion)
0x0C: Current splatfest XP (within the above level)
0x10: Matches played
0x14: Current team power (32-bit float)
0x18: This is a flag bitfield. bit 4 (0x10) may indicate pre-splatfest voting is open. bit 3 (0x8) may indicate splatfest results have been viewed.
    - observed 0x11 before splatfest, 0x33 during, 0x3B after

***********************
 SAVE ENCODING
***********************
Version 1.1.1, the launch-day patch, introduced new save security. This security consists of encrypting the body of the save with 128-bit AES-CBC, and then authenticating the save with a 128-bit AES-CMAC. Two separate keys are used for the separate operations.
The keys for this are generated by seeding a random number generator (slightly tweaked xorshift) and doing a whole lot of random number generation, shifting, and lookups in a 256-byte lookup table. The initial value of the RNG is saved. By re-seeding the RNG with the same data, the same keys can be generated to decrypt and authenticate the save later on.

Save footer layout:
0x483B0: IV for save encryption, 0x10-len and random
0x483C0: RNG context ultimately used to generate key bytes, 0x10-len
0x483D0: 0x10-length AES-CMAC over decrypted savedata

As of 1.1.1, this security can be partially stepped around by simply setting product version to 0. The save will only have its CRC checked, and will not be crypted or authenticated. This won't work in the future if the save layout changes, and of course you must decrypt a newer save before it can be loaded decrypted.

See the tool 'splatcrypt' in this repo for info on how this crypto works!